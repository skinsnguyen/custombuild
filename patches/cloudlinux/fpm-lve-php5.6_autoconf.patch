diff --git a/main/php_config.h.in b/main/php_config.h.in
index 5f9576c..f139557 100644
--- a/main/php_config.h.in
+++ b/main/php_config.h.in
@@ -1426,6 +1426,9 @@
 /* PostgreSQL 7.3.0 or later */
 #undef HAVE_PQUNESCAPEBYTEA
 
+/* do we have lve? */
+#undef HAVE_LVE
+
 /* do we have prctl? */
 #undef HAVE_PRCTL
 
diff --git a/sapi/fpm/config.m4 b/sapi/fpm/config.m4
index 8962810..e43c737 100644
--- a/sapi/fpm/config.m4
+++ b/sapi/fpm/config.m4
@@ -18,6 +18,15 @@ AC_DEFUN([AC_FPM_STDLIBS],
   AC_CHECK_HEADERS([arpa/inet.h netinet/in.h])
 ])
 
+AC_DEFUN([AC_FPM_LVE],
+[
+  have_lve=no
+  AC_CHECK_HEADERS([lve/lve-ctl.h], [have_lve=yes])
+  if test "$have_lve" = "yes"; then
+    AC_SEARCH_LIBS(init_lve, lve, [AC_DEFINE(HAVE_LVE, [], [LVE support])])
+  fi
+])
+
 AC_DEFUN([AC_FPM_PRCTL],
 [
   AC_MSG_CHECKING([for prctl])
@@ -537,6 +546,7 @@ if test "$PHP_FPM" != "no"; then
   AC_MSG_RESULT($PHP_FPM)
 
   AC_FPM_STDLIBS
+  AC_FPM_LVE
   AC_FPM_PRCTL
   AC_FPM_CLOCK
   AC_FPM_TRACE
diff --git a/sapi/fpm/fpm/fpm_children.c b/sapi/fpm/fpm/fpm_children.c
index 35058b0..e628175 100644
--- a/sapi/fpm/fpm/fpm_children.c
+++ b/sapi/fpm/fpm/fpm_children.c
@@ -31,12 +31,21 @@
 
 #include "zlog.h"
 
+#ifdef HAVE_LVE
+#include <lve/lve-ctl.h>
+struct liblve *lve;
+#endif
+
 static time_t *last_faults;
 static int fault;
 
+
 static void fpm_children_cleanup(int which, void *arg) /* {{{ */
 {
 	free(last_faults);
+#ifdef HAVE_LVE
+	destroy_lve(lve);
+#endif
 }
 /* }}} */
 
@@ -358,6 +367,41 @@ static void fpm_parent_resources_use(struct fpm_child_s *child) /* {{{ */
 }
 /* }}} */
 
+#ifdef HAVE_LVE
+void fpm_lve_leave(struct liblve *lve, struct fpm_worker_pool_s *wp, uint32_t p_cookie) /* {{{ */
+{
+  int rc = 0;
+  if (p_cookie == 0) return;
+  zlog(ZLOG_DEBUG, "[pool %s] Exiting LVE: LVE(%d)", wp->config->name, wp->set_uid);  
+  rc = lve_exit(lve, &p_cookie);
+  if (rc) {
+      zlog(ZLOG_ERROR, "[pool %s] Error existing LVE: LVE(%d)", wp->config->name, wp->set_uid);  
+  }
+}
+/* }}} */
+
+uint32_t fpm_lve_enter(struct liblve *lve, struct fpm_worker_pool_s *wp) /* {{{ */
+{
+  uint32_t p_cookie = 0;
+  int rc = 0;
+  int keep_errno = 0;
+  zlog(ZLOG_DEBUG, "[pool %s] Entering LVE: LVE(%d)", wp->config->name, wp->set_uid);
+  rc = lve_enter_flags(lve, wp->set_uid, &p_cookie, LVE_NO_MAXENTER);
+  keep_errno = errno;
+  if (rc) {
+    if (keep_errno = EPERM) {
+      zlog(ZLOG_ERROR, "[pool %s] Already inside LVE: LVE(%d)", wp->config->name, wp->set_uid);
+    } else {
+      zlog(ZLOG_ERROR, "[pool %s] Error on LVE enter: LVE(%d)", wp->config->name, wp->set_uid); 
+    } 
+    return 0;
+  } else {
+    return p_cookie;
+  }
+}
+/* }}} */
+#endif
+
 int fpm_children_make(struct fpm_worker_pool_s *wp, int in_event_loop, int nb_to_spawn, int is_debug) /* {{{ */
 {
 	pid_t pid;
@@ -380,6 +424,13 @@ int fpm_children_make(struct fpm_worker_pool_s *wp, int in_event_loop, int nb_to
 	} else { /* PM_STYLE_STATIC */
 		max = wp->config->pm_max_children;
 	}
+	
+#ifdef HAVE_LVE                                                                                                                                                                                                                            
+       uint32_t p_cookie = 0;                                                                                                                                                                                                               
+       if (fpm_pctl_can_spawn_children()) {                                                                                                                                                                                                 
+         p_cookie = fpm_lve_enter(lve, wp);                                                                                                                                                                                                 
+       }                                                                                                                                                                                                                                    
+#endif 
 
 	/*
 	 * fork children while:
@@ -422,6 +473,9 @@ int fpm_children_make(struct fpm_worker_pool_s *wp, int in_event_loop, int nb_to
 		}
 
 	}
+#ifdef HAVE_LVE
+	fpm_lve_leave(lve, wp, p_cookie);
+#endif
 
 	if (!warned && fpm_global_config.process_max > 0 && fpm_globals.running_children >= fpm_global_config.process_max) {
 		warned = 1;
@@ -456,6 +510,9 @@ int fpm_children_create_initial(struct fpm_worker_pool_s *wp) /* {{{ */
 
 int fpm_children_init_main() /* {{{ */
 {
+#ifdef HAVE_LVE
+        lve = init_lve(malloc, free);
+#endif
 	if (fpm_global_config.emergency_restart_threshold &&
 		fpm_global_config.emergency_restart_interval) {
 
diff --git a/sapi/fpm/fpm/fpm_unix.c b/sapi/fpm/fpm/fpm_unix.c
index 17d0b81..e35d4c8 100644
--- a/sapi/fpm/fpm/fpm_unix.c
+++ b/sapi/fpm/fpm/fpm_unix.c
@@ -17,6 +17,10 @@
 #include <sys/prctl.h>
 #endif
 
+#ifdef HAVE_LVE
+#include <lve/lve-ctl.h>
+#endif
+
 #include "fpm.h"
 #include "fpm_conf.h"
 #include "fpm_cleanup.h"
@@ -164,7 +168,19 @@ int fpm_unix_init_child(struct fpm_worker_pool_s *wp) /* {{{ */
 			zlog(ZLOG_SYSERROR, "[pool %s] failed to set rlimit_core for this pool. Please check your system limits or decrease rlimit_core. setrlimit(RLIMIT_CORE, %d)", wp->config->name, wp->config->rlimit_core);
 		}
 	}
-
+#ifdef HAVE_LVE
+	if (is_root) {
+	  struct passwd *pwd;
+	  char error_msg[1024];
+	  int result;
+	  pwd = getpwnam(wp->config->user);
+	  result = lve_jail_uid(pwd, SECURELVE_MIN_UID, error_msg);
+	  if (1 != result && 0 != result) {
+	    zlog(ZLOG_SYSERROR, "[pool %s] CageFS jail error %s", wp->config->name, error_msg);
+	    return -1;
+	  }
+	}
+#endif
 	if (is_root && wp->config->chroot && *wp->config->chroot) {
 		if (0 > chroot(wp->config->chroot)) {
 			zlog(ZLOG_SYSERROR, "[pool %s] failed to chroot(%s)",  wp->config->name, wp->config->chroot);
